import Head from "next/head";
import React, { useCallback, useEffect, useState } from "react";
import { SurveyBaseSchema, type Survey } from "~/types";
import debounce from "lodash.debounce";
import { api } from "~/utils/api";
import IdInput from "~/components/IdInput";
import { ToastContainer, toast } from 'react-toastify'
export default function Home() {
  const CACHE_KEY = "edit-survey-unsaved";
  const [postId, setPostId] = useState("");
  const [error, setError] = useState(false);
  const [surveyData, setSurveyData] = useState({
    id: "",
    notes: "",
    created_at: "",
  });
  const setNotes = (notes: string) => {
    setSurveyData((prev) => ({ ...prev, notes }));
  };
  const [notesStateCache, setNotesStateCache] = useState("");

  const successToast = (message: string) => toast(message, {
    type: "success",
    position: 'bottom-right'
  })
  const errorToast = (message: string) => toast(message, {
    type: "error",
    position: 'bottom-right'
  })
  useEffect(() => {
    try {
      const data = localStorage.getItem(CACHE_KEY);
      if (!data) return;
      const json: unknown = JSON.parse(data);
      const parsed = SurveyBaseSchema.parse(json);
      setSurveyData(parsed);
      setNotesStateCache(parsed.notes);
    } catch (error) {
      console.error(error);
    }
  }, []);

  const saveSurveyToLocal = useCallback((survey: Survey) => {
    const json = JSON.stringify(survey);
    localStorage.setItem(CACHE_KEY, json);
  }, []);

  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const debouncedSaveSurveyToLocal = useCallback(
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    debounce(saveSurveyToLocal, 1000),
    [],
  );
  const deleteSurveyFromLocal = () => {
    localStorage.removeItem(CACHE_KEY);
  };
  const { mutate: getSurveyById } = api.post.getSurvey.useMutation({
    onSuccess: (data) => {
      if (!data.survey || data.error) {
        setError(true)
      } else {
        setError(false)
        setSurveyData(data.survey)

      }
    },
    onError: (data) => {
      setError(true)
      console.log(data.message)
    }
  })
  // const { mutate: getSurveyById } = api.post.getSurvey.useMutation({
  //   onSuccess: (data) => {
  //     if (error) {
  //       // toast with message
  //     }
  //     setError(false)
  //     deleteSurveyFromLocal()
  //     setSurveyData(data.survey!) //error means that survey is here
  //   },
  //   onError: (error) => {
  //     if (error.message) {
  //       // toast with message
  //     }
  //     setError(true);
  //   }
  // })

  function getSurveyHandler(e: React.FormEvent) {
    e.preventDefault()
    const input = { id: postId }
    getSurveyById(input)
  }

  const { mutate: updateSurvey } = api.post.updateSurvey.useMutation({
    onMutate(_variables) {
      setNotesStateCache(surveyData.notes);
    },
    onSuccess: (data) => {
      // toast success
    },
    onError: (error) => {
      if (error.message) {
        // toast with message
      }
    }
  })



  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <pre className="fixed">{JSON.stringify({ postId })}</pre>
        {
          !surveyData.id ? (
            <form
              className="bg-gray-200 p-5 shadow-2xl flex flex-col gap-5 rounded-2xl"
              onSubmit={getSurveyHandler}
            >
              <IdInput postId={postId} setPostId={setPostId} error={error} />
              <button
                className=" w-1/3 self-end rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                type='submit'
              >
                submit</button>
            </form>
          ) : (
            //text area
            <div></div>
          )
        }
        <ToastContainer />
      </main>
    </>
  );
}
